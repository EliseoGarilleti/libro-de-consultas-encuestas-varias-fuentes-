system("/Users/eliseo/Library/TinyTeX/bin/universal-darwin/tlmgr install xcolor")
system("/Users/eliseo/Library/TinyTeX/bin/universal-darwin/tlmgr install pagecolor")
quarto::quarto_render(".")
quarto::quarto_render(".")
quarto::quarto_render(".")
quarto::quarto_render(".")
quarto::quarto_render(".")
quarto::quarto_render(".")
install.packages("cli")
install.packages("cli")
quarto::quarto_install()
quarto::quarto_path()
quarto::quarto_render(".")
quarto::quarto_render(".", as_job = FALSE)
quarto::quarto_render(".", as_job = FALSE, quiet = TRUE)
quarto::quarto_render(".", as_job = FALSE, quiet = TRUE)
quarto::quarto_render(".", as_job = FALSE)
install.packages(c("cli", "rlang", "processx"))
install.packages(c("cli", "rlang", "processx"))
quarto::quarto_render(".")
packageVersion("cli")
packageVersion("rlang")
packageVersion("processx")
rm(list = ls())
cat("R session restarted and environment cleared.\n")
df <- readRDS("data/longitudinal_varias_encuestas_final.RDS") %>%
filter(mes >= as.Date("2023-09-01"))
# Paquetes
library(tidyverse)
library(showtext)
library(ggtext)
library(flextable)
library(officer)
library(scales)
library(quarto)
library(glue)
library(lubridate)
df <- readRDS("data/longitudinal_varias_encuestas_final.RDS") %>%
filter(mes >= as.Date("2023-09-01"))
df %>%
group_by(mes, idv_group) %>%
tally(wt = ponde_mes_ajustada) %>%
mutate(perc = round((n / sum(n) * 100), 1)) %>%
filter(idv_group %in% c("PSOE", "PP", "Vox", "Sumar", "Podemos")) %>%
```
df %>%
group_by(mes, idv_group) %>%
tally(wt = ponde_mes_ajustada) %>%
mutate(perc = round((n / sum(n) * 100), 1)) %>%
filter(idv_group %in% c("PSOE", "PP", "Vox", "Sumar", "Podemos"))
df_idv<-df %>%
group_by(mes, idv_group) %>%
tally(wt = ponde_mes_ajustada) %>%
mutate(perc = round((n / sum(n) * 100), 1)) %>%
filter(idv_group %in% c("PSOE", "PP", "Vox", "Sumar", "Podemos"))
# Calculamos resumen por partido
df_idv %>%
group_by(idv_group) %>%
summarise(
mes_ini = min(mes, na.rm = TRUE),
perc_ini = perc[which.min(mes)],
mes_fin = max(mes, na.rm = TRUE),
perc_fin = perc[which.max(mes)],
mes_min = mes[which.min(perc)],
perc_min = min(perc, na.rm = TRUE),
mes_max = mes[which.max(perc)],
perc_max = max(perc, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
diff = round(perc_fin - perc_ini, 1),
texto = glue("- **{idv_group}**: En {format(mes_ini, '%B de %Y')} un {perc_ini}% afirmaba que les votaría, hoy lo hace un {perc_fin}%, una diferencia de {diff} puntos. El dato más bajo fue {perc_min}% en {format(mes_min, '%B de %Y')}, y el más alto {perc_max}% en {format(mes_max, '%B de %Y')}.")
)
Sys.setlocale("LC_TIME", "es_ES.UTF-8") %||%
Sys.setlocale("LC_TIME", "Spanish_Spain.1252") %||%
Sys.setlocale("LC_TIME", "es_ES")
Sys.setlocale("LC_TIME", "es_ES.UTF-8") %||%
Sys.setlocale("LC_TIME", "Spanish_Spain.1252") %||%
Sys.setlocale("LC_TIME", "es_ES")
format(as.Date("2025-10-01"), "%B de %Y")
library(ggiraph)
install.packages("ggiraph")
library(ggiraph)
install.packages("Rcpp", type = "binary")
.rs.restartR()
install.packages("ggiraph")
install.packages("ggiraph")
.rs.restartR()
library(ggiraph)
install.packages("ggplot2")
.rs.restartR()
install.packages("ggiraph", repos = "https://cran.rstudio.com")
install.packages("ggiraph", repos = "https://cran.rstudio.com")
packageVersion("ggiraph")
packageVersion("Rcpp")
df_idv %>%
count(idv_group, sort = TRUE)
library(tidyverse)
df_idv %>%
count(idv_group, sort = TRUE)
install.packages("webshot2")
webshot2::install_phantomjs()
library(webshot2)
webshot("https://www.google.com", file = "test_webshot.png")
chromote::find_chrome()
library(chromote)
b <- ChromoteSession$new()
b$Evaluate("navigator.userAgent")
library(chromote)
b <- ChromoteSession$new()
res <- b$Runtime$evaluate("navigator.userAgent")
print(res$result$value)
b$close()
b$close()
library(webshot2)
library(chromote)
b <- ChromoteSession$new()
b$close()
library(webshot2)
library(chromote)
b <- ChromoteSession$new()
b$close()
library(chromote)
chromote::default_chromote_session(NULL)
library(chromote)
chromote::default_chromote_session(NULL)
gc()
# Limpieza segura de sesiones Chromote activas
try({
b <- chromote::ChromoteSession$new()
b$close()
rm(b)
gc()
}, silent = TRUE)
# Limpieza segura de sesiones Chromote activas
try({
b <- chromote::ChromoteSession$new()
b$close()
rm(b)
gc()
}, silent = TRUE)
library(chromote)
b <- ChromoteSession$new()
b$Runtime$evaluate("navigator.userAgent")$result$value
b$close()
